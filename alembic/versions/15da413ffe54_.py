"""empty message

Revision ID: 15da413ffe54
Revises:
Create Date: 2025-03-08 14:52:16.952450

"""
from typing import Sequence, Union

import geoalchemy2
import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "15da413ffe54"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "campaigns",
        sa.Column("campaignid", sa.Integer(), nullable=False),
        sa.Column("campaignname", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("contactname", sa.String(), nullable=True),
        sa.Column("contactemail", sa.String(), nullable=True),
        sa.Column("startdate", sa.DateTime(), nullable=True),
        sa.Column("enddate", sa.DateTime(), nullable=True),
        sa.Column("allocation", sa.String(), nullable=False),
        sa.Column("bbox_west", sa.Float(), nullable=True),
        sa.Column("bbox_east", sa.Float(), nullable=True),
        sa.Column("bbox_south", sa.Float(), nullable=True),
        sa.Column("bbox_north", sa.Float(), nullable=True),
        sa.PrimaryKeyConstraint("campaignid"),
        sa.UniqueConstraint("campaignname"),
    )
    op.create_index(
        op.f("ix_campaigns_campaignid"), "campaigns", ["campaignid"], unique=False
    )
    op.create_table(
        "locations",
        sa.Column("locationid", sa.Integer(), nullable=False),
        sa.Column("stationid", sa.Integer(), nullable=True),
        sa.Column("collectiontime", sa.DateTime(), nullable=True),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                geometry_type="POINT",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("locationid"),
    )
    # op.create_index('idx_locations_geometry', 'locations', ['geometry'], unique=False, postgresql_using='gist')
    op.create_index(
        op.f("ix_locations_locationid"), "locations", ["locationid"], unique=False
    )
    op.create_table(
        "campaign_sensor_types",
        sa.Column("campaign_id", sa.Integer(), nullable=False),
        sa.Column("sensor_type", sa.String(length=50), nullable=False),
        sa.ForeignKeyConstraint(
            ["campaign_id"],
            ["campaigns.campaignid"],
        ),
        sa.PrimaryKeyConstraint(
            "campaign_id", "sensor_type", name="campaign_sensor_types_pk"
        ),
    )
    op.create_index(
        "idx_campaign_sensor_types",
        "campaign_sensor_types",
        ["sensor_type"],
        unique=False,
    )
    op.create_table(
        "stations",
        sa.Column("stationid", sa.Integer(), nullable=False),
        sa.Column("campaignid", sa.Integer(), nullable=True),
        sa.Column("stationname", sa.String(), nullable=True),
        sa.Column("projectid", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("contactname", sa.String(), nullable=True),
        sa.Column("contactemail", sa.String(), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.Column("startdate", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["campaignid"],
            ["campaigns.campaignid"],
        ),
        sa.PrimaryKeyConstraint("stationid"),
        sa.UniqueConstraint("stationname"),
    )
    op.create_index(
        op.f("ix_stations_stationid"), "stations", ["stationid"], unique=False
    )
    op.create_table(
        "sensors",
        sa.Column("sensorid", sa.Integer(), nullable=False),
        sa.Column("stationid", sa.Integer(), nullable=True),
        sa.Column("alias", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("postprocess", sa.Boolean(), nullable=True),
        sa.Column("postprocessscript", sa.String(), nullable=True),
        sa.Column("units", sa.String(), nullable=True),
        sa.Column("variablename", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["stationid"],
            ["stations.stationid"],
        ),
        sa.PrimaryKeyConstraint("sensorid"),
    )
    op.create_index(op.f("ix_sensors_sensorid"), "sensors", ["sensorid"], unique=False)
    op.create_table(
        "measurements",
        sa.Column("measurementid", sa.Integer(), nullable=False),
        sa.Column("sensorid", sa.Integer(), nullable=True),
        sa.Column("stationid", sa.Integer(), nullable=True),
        sa.Column("variablename", sa.String(), nullable=True),
        sa.Column("collectiontime", sa.DateTime(), nullable=True),
        sa.Column("variabletype", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("measurementvalue", sa.Float(), nullable=True),
        sa.Column("locationid", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["locationid"],
            ["locations.locationid"],
        ),
        sa.ForeignKeyConstraint(
            ["sensorid"],
            ["sensors.sensorid"],
        ),
        sa.PrimaryKeyConstraint("measurementid"),
    )
    op.create_index(
        op.f("ix_measurements_measurementid"),
        "measurements",
        ["measurementid"],
        unique=False,
    )
    op.create_table(
        "sensorobjects",
        sa.Column("objectid", sa.Integer(), nullable=False),
        sa.Column("sensorid", sa.Integer(), nullable=True),
        sa.Column("filename", sa.String(), nullable=True),
        sa.Column("filetype", sa.String(), nullable=True),
        sa.Column("filesize", sa.Float(), nullable=True),
        sa.Column("creationdate", sa.DateTime(), nullable=True),
        sa.Column("checksum", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["sensorid"],
            ["sensors.sensorid"],
        ),
        sa.PrimaryKeyConstraint("objectid"),
    )
    op.create_index(
        op.f("ix_sensorobjects_objectid"), "sensorobjects", ["objectid"], unique=False
    )
    # op.drop_table('spatial_ref_sys')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "spatial_ref_sys",
        sa.Column("srid", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "auth_name", sa.VARCHAR(length=256), autoincrement=False, nullable=True
        ),
        sa.Column("auth_srid", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "srtext", sa.VARCHAR(length=2048), autoincrement=False, nullable=True
        ),
        sa.Column(
            "proj4text", sa.VARCHAR(length=2048), autoincrement=False, nullable=True
        ),
        sa.CheckConstraint(
            "(srid > 0) AND (srid <= 998999)", name="spatial_ref_sys_srid_check"
        ),
        sa.PrimaryKeyConstraint("srid", name="spatial_ref_sys_pkey"),
    )
    op.drop_index(op.f("ix_sensorobjects_objectid"), table_name="sensorobjects")
    op.drop_table("sensorobjects")
    op.drop_index(op.f("ix_measurements_measurementid"), table_name="measurements")
    op.drop_table("measurements")
    op.drop_index(op.f("ix_sensors_sensorid"), table_name="sensors")
    op.drop_table("sensors")
    op.drop_index(op.f("ix_stations_stationid"), table_name="stations")
    op.drop_table("stations")
    op.drop_index("idx_campaign_sensor_types", table_name="campaign_sensor_types")
    op.drop_table("campaign_sensor_types")
    op.drop_index(op.f("ix_locations_locationid"), table_name="locations")
    op.drop_index(
        "idx_locations_geometry", table_name="locations", postgresql_using="gist"
    )
    op.drop_table("locations")
    op.drop_index(op.f("ix_campaigns_campaignid"), table_name="campaigns")
    op.drop_table("campaigns")
    # ### end Alembic commands ###
